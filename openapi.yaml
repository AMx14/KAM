openapi: 3.0.0
info:
  title: Key Account Management API
  description: API for managing restaurants, contacts, and interactions.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local Development Server

paths:
  /api/address:
    get:
      summary: Get all addresses
      responses:
        '200':
          description: List of all addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressCreate'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/address/{id}:
    get:
      summary: Get a specific address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressCreate'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete an address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - role
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/profile:
    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/restaurants:
    get:
      summary: Get all restaurants
      responses:
        '200':
          description: List of all restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantCreate'
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/restaurants/due-calls:
    get:
      summary: Get restaurants requiring calls
      responses:
        '200':
          description: List of restaurants due for calls
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/restaurants/performance-metrics:
    get:
      summary: Get restaurant performance metrics
      responses:
        '200':
          description: Performance metrics for restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceMetric'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/contacts:
    get:
      summary: Get all contacts
      responses:
        '200':
          description: List of all contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'

    post:
      summary: Create a new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreate'
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'

  /api/contacts/restaurant/{restaurantId}:
    get:
      summary: Get contacts for a specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of contacts for the restaurant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'

  /api/interactions:
    post:
      summary: Create a new interaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InteractionCreate'
      responses:
        '201':
          description: Interaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'

  /api/interactions/restaurant/{restaurantId}:
    get:
      summary: Get interactions for a specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of interactions for the restaurant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interaction'

components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        pin_code:
          type: string
        timezone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - city
        - country
        - pin_code

    AddressCreate:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        pin_code:
          type: string
        timezone:
          type: string
      required:
        - city
        - country
        - pin_code

    Restaurant:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum: [active, inactive, converted]
        call_frequency:
          type: integer
        last_call_date:
          type: string
          format: date-time
        address_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - status
        - call_frequency

    RestaurantCreate:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [active, inactive, converted]
        call_frequency:
          type: integer
        address_id:
          type: integer
      required:
        - name
        - status
        - call_frequency

    Contact:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        role:
          type: string
        phone:
          type: string
        email:
          type: string
        restaurant_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - email
        - phone
        - role
        - restaurant_id

    ContactCreate:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
        phone:
          type: string
        email:
          type: string
        restaurant_id:
          type: integer
      required:
        - name
        - email
        - phone
        - role
        - restaurant_id

    Interaction:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [call, order]
        details:
          type: string
        date:
          type: string
          format: date
        restaurant_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - type
        - details
        - date
        - restaurant_id

    InteractionCreate:
      type: object
      properties:
        type:
          type: string
          enum: [call, order]
        details:
          type: string
        date:
          type: string
          format: date
        restaurant_id:
          type: integer
      required:
        - type
        - details
        - date
        - restaurant_id

    PerformanceMetric:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        totalOrders:
          type: integer
        averageOrderFrequency:
          type: number
        performanceStatus:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
